import base64
from io import BytesIO
from PIL import Image
import matplotlib.pyplot as plt

# JSON data snippet
data = {
    "color_visualization": "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"
    # (Truncated for brevity; replace with full Base64 string from your JSON)
}

# Step 1: Extract the Base64 string
base64_string = data["color_visualization"]

# Step 2: Decode the Base64 string
image_data = base64.b64decode(base64_string)

# Step 3: Convert to an image
image = Image.open(BytesIO(image_data))

# Step 4: Display the image
plt.imshow(image)
plt.axis('off')  # Turn off axes for better visualization
plt.show()
